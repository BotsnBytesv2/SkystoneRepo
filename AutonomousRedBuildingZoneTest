package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import java.util.Locale;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;

@Autonomous
public class AutonomousRedBuildingZoneTest extends LinearOpMode{

    /**
     * Note that the REV Robotics Color-Distance incorporates two sensors into one device.
     * It has a light/distance (range) sensor.  It also has an RGB color sensor.
     * The light/distance sensor saturates at around 2" (5cm).  This means that targets that are 2"
     * or closer will display the same value for distance/light detected.
     *
     * Although you configure a single REV Robotics Color-Distance sensor in your configuration file,
     * you can treat the sensor as two separate sensors that share the same name in your op mode.
     *
     * In this example, we represent the detected color by a hue, saturation, and value color
     * model (see https://en.wikipedia.org/wiki/HSL_and_HSV).  We change the background
     * color of the screen to match the detected color.
     *
     * In this example, we  also use the distance sensor to display the distance
     * to the target object.  Note that the distance sensor saturates at around 2" (5 cm).
     *
     */
    
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor frontright = null;
    private DcMotor frontleft = null;
    private DcMotor backleft = null;
    private DcMotor backright = null;
    
    ColorSensor sensorColor;
    DistanceSensor sensorDistance;
    DistanceSensor sensorDistance2;
    @Override
    public void runOpMode() {
    
        frontleft = hardwareMap.get(DcMotor.class, "frontleftmotor");
        frontright = hardwareMap.get(DcMotor.class, "frontrightmotor");
        backright = hardwareMap.get(DcMotor.class, "backrightmotor");
        backleft = hardwareMap.get(DcMotor.class, "backleftmotor");
        
       frontright.setDirection(DcMotor.Direction.FORWARD);
       frontleft.setDirection(DcMotor.Direction.REVERSE);
       backright.setDirection(DcMotor.Direction.FORWARD);
       backleft.setDirection(DcMotor.Direction.REVERSE);

        // get a reference to the color sensor.
        sensorColor = hardwareMap.get(ColorSensor.class, "color_sensor");

        // get a reference to the distance sensor that shares the same name.
        sensorDistance = hardwareMap.get(DistanceSensor.class, "sensor_distance");
        sensorDistance2 = hardwareMap.get(DistanceSensor.class,"sensor_distance2");
        Rev2mDistanceSensor sensorTimeOfFlight = (Rev2mDistanceSensor)sensorDistance;
        Rev2mDistanceSensor sensorTimeOfFlight2 = (Rev2mDistanceSensor)sensorDistance2;

        // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues[] = {0F, 0F, 0F};
        // values is a reference to the hsvValues array.
        final float values[] = hsvValues;
        // sometimes it helps to multiply the raw RGB values with a scale factor
        // to amplify/attentuate the measured values.
        final double SCALE_FACTOR = 255;
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);

        // wait for the start button to be pressed.
        waitForStart();
       
        frontleft.setPower(0.0);
        frontright.setPower(0.0);
        backleft.setPower(0.0);
        backright.setPower(0.0);
        
        while (opModeIsActive()) {
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);
            telemetry.addData("range", String.format("%.01f mm", sensorDistance.getDistance(DistanceUnit.MM)));
            telemetry.addData("range", String.format("%.01f mm", sensorDistance2.getDistance(DistanceUnit.MM)));
            
            moveLeft(450, 0.4);
            moveForward(900, 0.4);
            
            int x = 0;
            if(x == 0){
              if (sensorColor.alpha() >= 200 && sensorColor.alpha()<= 300){
                telemetry.addLine("Yellow Stone");
                moveRight(200; 0.4);
              }
              else{
                telemetry.addLine("Skystone Found");
                x = 1;
              }
              if(sensorDistance.getDistance(DistanceUnit.MM) > sensorDistance2.getDistance(DistanceUnit.MM)){
                telemetry.addLine("Too left");
              }
              else if(sensorDistance.getDistance(DistanceUnit.MM) < sensorDistance2.getDistance(DistanceUnit.MM)){
                telemetry.addLine("Too Right");
              }
            }
            
            moveForward(300, 0.4);
            sleep(1000);
            moveBackward(1350, 0.4);
            spinLeft(400, 0.4);
            moveForward(2700, 0.4);
            
            // change the background color to match the color detected by the RGB sensor.
            // pass a reference to the hue, saturation, and value array as an argument
            // to the HSVToColor method.
            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

            telemetry.update();
        }

        // Set the panel back to the default color
        relativeLayout.post(new Runnable() {
            public void run() {
                relativeLayout.setBackgroundColor(Color.WHITE);
            }
        });
    }
    
    //distance should be in ticks
    //1120 ticks per rotation
    public void moveForward(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        frontleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        //int newtargetfl = frontleft.getTargetPosition() + (int)distance;
        //int newtargetfr = frontright.getTargetPosition() + (int)distance;
        //int newtargetbl = backleft.getTargetPosition() + (int)distance;
        //int newtargetbr = backright.getTargetPosition() + (int)distance;
        telemetry.addData("The distance is:",distance);
        
        telemetry.addData("The current position is:",frontleft.getCurrentPosition());
        
        frontleft.setTargetPosition(distance);
        frontright.setTargetPosition(distance);
        backleft.setTargetPosition(distance);
        backright.setTargetPosition(distance);
        
        
       

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        telemetry.addData("time1:", runtime.seconds());
        
        frontleft.setPower(power);
       frontright.setPower(power);
       backleft.setPower(power);
       backright.setPower(power);
        telemetry.addData("time: 2",  runtime.seconds());
       
        telemetry.update();
        int i=0;
        
         while(opModeIsActive() && (-frontleft.getCurrentPosition())< distance ){
            
          // opModeIsActive() && frontleft.isBusy() && frontright.isBusy() && backleft.isBusy() && backright.isBusy()){
       // telemetry.addData("The Target is:",frontleft.getTargetPosition());
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()));
       
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()/1120));
        telemetry.addData("The  position reminder:",(-frontleft.getCurrentPosition()%1120));
        telemetry.addData("The set position is:",frontleft.isBusy());
        telemetry.addData("The set position is:",i++);
        
        
        }
        
        telemetry.update();
        stopMotors();
        
       
    }
    
    public void moveBackward(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        frontleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        frontleft.setTargetPosition(-distance);
        frontright.setTargetPosition(-distance);
        backleft.setTargetPosition(-distance);
        backright.setTargetPosition(-distance);

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontleft.setPower(-power);
        frontright.setPower(-power);
        backleft.setPower(-power);
        backright.setPower(-power);
        
        while((frontleft.getCurrentPosition())< distance){
            
          // opModeIsActive() && frontleft.isBusy() && frontright.isBusy() && backleft.isBusy() && backright.isBusy()){
       // telemetry.addData("The Target is:",frontleft.getTargetPosition());
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()));
       
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()/1120));
        telemetry.addData("The  position reminder:",(-frontleft.getCurrentPosition()%1120));
        telemetry.addData("The set position is:",frontleft.isBusy());
        //telemetry.addData("The set position is:",i++);
        
        
        }
    stopMotors();
    }
    public void moveRight(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        frontleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backleft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backright.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        frontleft.setTargetPosition(distance);
        frontright.setTargetPosition(-distance);
        backleft.setTargetPosition(-distance);
        backright.setTargetPosition(distance);

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontleft.setPower(power);
        frontright.setPower(-power);
        backleft.setPower(-power-0.3);
        backright.setPower(power+0.3);
        
         while(opModeIsActive() && (-frontleft.getCurrentPosition())< distance ){
            
          // opModeIsActive() && frontleft.isBusy() && frontright.isBusy() && backleft.isBusy() && backright.isBusy()){
       // telemetry.addData("The Target is:",frontleft.getTargetPosition());
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()));
       
        telemetry.addData("The current position is:",(-frontleft.getCurrentPosition()/1120));
        telemetry.addData("The  position reminder:",(-frontleft.getCurrentPosition()%1120));
        telemetry.addData("The set position is:",frontleft.isBusy());
        //telemetry.addData("The set position is:",i++);
        
        
        }
        stopMotors();

    }
    public void moveLeft(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        frontright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        
        frontleft.setTargetPosition(-distance);
        frontright.setTargetPosition(distance);
        backleft.setTargetPosition(distance);
        backright.setTargetPosition(-distance);

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontleft.setPower(-power);
        frontright.setPower(power);
        backleft.setPower(power);
        backright.setPower(-power);
        
         while(opModeIsActive() && (frontleft.getCurrentPosition())< distance){
        

        stopMotors();
        
    }
    public void spinLeft(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        frontright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        
        frontleft.setTargetPosition(-distance);
        frontright.setTargetPosition(distance);
        backleft.setTargetPosition(-distance);
        backright.setTargetPosition(distance);

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontleft.setPower(-power);
        frontright.setPower(power);
        backleft.setPower(-power);
        backright.setPower(power);
        
         while(opModeIsActive() && (frontleft.getCurrentPosition())< distance){
        
    }
        stopMotors();
    }
    public void spinRight(int distance, double power){
        frontleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        frontright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backleft.setMode(DcMotor.RunMode.RESET_ENCODERS);
        backright.setMode(DcMotor.RunMode.RESET_ENCODERS);
        
        frontleft.setTargetPosition(distance);
        frontright.setTargetPosition(-distance);
        backleft.setTargetPosition(distance);
        backright.setTargetPosition(-distance);

        frontleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backleft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backright.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontleft.setPower(power);
        frontright.setPower(-power);
        backleft.setPower(power);
        backright.setPower(-power);
        
         while(opModeIsActive() && (-frontleft.getCurrentPosition())< distance){
        
    }
        stopMotors();
        
    }
    public void stopMotors(){
        frontleft.setPower(0.0);
        frontright.setPower(0.0);
        backleft.setPower(0.0);
        backright.setPower(0.0);
        sleep(800);
        frontleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backleft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backright.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }
}
